const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîß Configura√ß√£o do Supabase');
console.log('==========================\n');

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupSupabase() {
  try {
    const envPath = path.join(__dirname, '.env');
    let envContent = '';
    
    // Verifica se o arquivo .env j√° existe
    if (fs.existsSync(envPath)) {
      console.log('üìÅ Arquivo .env encontrado. Vou atualizar as configura√ß√µes do Supabase...\n');
      envContent = fs.readFileSync(envPath, 'utf8');
    } else {
      console.log('üìÅ Criando novo arquivo .env...\n');
      // Conte√∫do base do .env
      envContent = `# Configura√ß√µes da API Groq (opcional - usa padr√£o se n√£o configurado)
GROQ_API_KEY=sua_chave_api_groq_aqui

# Configura√ß√µes do Supabase (obrigat√≥rio para vagas)
SUPABASE_URL=https://seu-projeto.supabase.co
SUPABASE_ANON_KEY=sua_chave_anonima_supabase

# Token de autentica√ß√£o do dashboard (padr√£o: Jornada2024@)
DASHBOARD_TOKEN=Jornada2024@

# Configura√ß√µes da empresa (opcionais - usam padr√£o se n√£o configuradas)
COMPANY_NAME=Evolux Solu√ß√µes de RH
COMPANY_WEBSITE=https://evoluxrh.com.br
COMPANY_EMAIL=contato@evoluxrh.com.br

# N√∫mero do WhatsApp (opcional - usa padr√£o se n√£o configurado)
WHATSAPP_NUMBER=5511999999999

# Portas dos servidores (opcionais - usam padr√£o se n√£o configuradas)
PORT=3000
DASHBOARD_PORT=3003
`;
    }

    console.log('üìã Por favor, forne√ßa as informa√ß√µes do seu projeto Supabase:\n');

    const supabaseUrl = await question('üåê URL do projeto Supabase (ex: https://abc123.supabase.co): ');
    const supabaseKey = await question('üîë Chave an√¥nima do Supabase: ');

    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå URL e chave do Supabase s√£o obrigat√≥rias!');
      rl.close();
      return;
    }

    // Atualiza ou adiciona as configura√ß√µes do Supabase
    const lines = envContent.split('\n');
    let supabaseUrlUpdated = false;
    let supabaseKeyUpdated = false;

    for (let i = 0; i < lines.length; i++) {
      if (lines[i].startsWith('SUPABASE_URL=')) {
        lines[i] = `SUPABASE_URL=${supabaseUrl}`;
        supabaseUrlUpdated = true;
      } else if (lines[i].startsWith('SUPABASE_ANON_KEY=')) {
        lines[i] = `SUPABASE_ANON_KEY=${supabaseKey}`;
        supabaseKeyUpdated = true;
      }
    }

    // Adiciona as configura√ß√µes se n√£o existirem
    if (!supabaseUrlUpdated) {
      lines.push(`SUPABASE_URL=${supabaseUrl}`);
    }
    if (!supabaseKeyUpdated) {
      lines.push(`SUPABASE_ANON_KEY=${supabaseKey}`);
    }

    const newEnvContent = lines.join('\n');

    // Salva o arquivo .env
    fs.writeFileSync(envPath, newEnvContent);

    console.log('\n‚úÖ Configura√ß√µes do Supabase salvas com sucesso!');
    console.log(`üìÅ Arquivo: ${envPath}`);
    console.log(`üåê URL: ${supabaseUrl}`);
    console.log(`üîë Chave: ${supabaseKey.substring(0, 10)}...`);

    console.log('\nüîÑ Para aplicar as mudan√ßas, reinicie o sistema.');
    console.log('üí° Dica: Execute "npm start" ou reinicie o PM2 se estiver usando.');

  } catch (error) {
    console.error('‚ùå Erro ao configurar Supabase:', error.message);
  } finally {
    rl.close();
  }
}

setupSupabase();

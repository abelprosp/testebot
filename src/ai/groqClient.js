const Groq = require('groq-sdk');
const config = require('../config/config');
const JobService = require('../services/jobService');
const BusinessHoursService = require('../services/businessHoursService');

class GroqClient {
  
  constructor() {
    // üîë COLOQUE SUA API KEY DA GROQ AQUI:
    const GROQ_API_KEY_DIRECT = '';
    
    // Usa a chave direta primeiro, depois tenta config
    const apiKey = GROQ_API_KEY_DIRECT || config.groq.apiKey;
    
    // Verifica se a API key est√° dispon√≠vel
    if (!apiKey || apiKey === 'gsk_sua_chave_aqui_exemplo') {
      console.error('‚ùå GROQ_API_KEY n√£o est√° definida! O sistema funcionar√° com respostas padr√£o.');
      this.groq = null;
    } else {
      console.log('‚úÖ GROQ_API_KEY carregada com sucesso (direta do c√≥digo)');
      this.groq = new Groq({
        apiKey: apiKey,
      });
    }
    
    this.model = config.groq.model;
    this.jobService = new JobService();
    this.businessHoursService = new BusinessHoursService();
    
    console.log('‚úÖ JobService inicializado (conectado ao Supabase)');
    
    // Cache para respostas similares (economizar tokens)
    this.responseCache = new Map();
    this.maxCacheSize = 100;
    
    // Contador de tokens para monitoramento
    this.tokenUsage = {
      totalCalls: 0,
      totalTokens: 0,
      cacheHits: 0,
      cacheMisses: 0
    };
    
    // M√°ximo de mensagens no contexto
    this.maxContextMessages = 20; // Aumentado para melhor qualidade das respostas
  }

  async generateResponse(messages, context = {}) {
    try {
      // Verifica se a API est√° dispon√≠vel
      if (!this.groq) {
        console.log('‚ö†Ô∏è Groq API n√£o dispon√≠vel - usando resposta padr√£o');
        return this.getFallbackResponse(messages[messages.length - 1]?.content || '');
      }
      
      // Gera chave de cache baseada na mensagem atual e contexto
      const cacheKey = this.generateCacheKey(messages, context);
      
      // Verifica cache primeiro
      if (this.responseCache.has(cacheKey)) {
        console.log('üíæ Cache HIT - resposta j√° dispon√≠vel');
        this.tokenUsage.cacheHits++;
        return this.responseCache.get(cacheKey);
      }
      
      this.tokenUsage.cacheMisses++;
      
      // Otimiza contexto para economizar tokens
      const optimizedMessages = this.optimizeContext(messages);
      const optimizedSystemPrompt = await this.buildOptimizedSystemPrompt(context);
      
      const chatMessages = [
        { role: 'system', content: optimizedSystemPrompt },
        ...optimizedMessages
      ];

      console.log(`ü§ñ Chamando Groq API - ${chatMessages.length} mensagens`, {
        systemPromptLength: optimizedSystemPrompt.length,
        totalMessages: chatMessages.length
      });

      const completion = await this.groq.chat.completions.create({
        messages: chatMessages,
        model: this.model,
        temperature: 0.8,
        max_tokens: 1500, // Aumentado para respostas mais completas com todas as vagas
        top_p: 1,
        stream: false,
      });

      const response = completion.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.';
      
      // Salva no cache
      this.saveToCache(cacheKey, response);
      
      // Atualiza estat√≠sticas
      this.tokenUsage.totalCalls++;
      this.tokenUsage.totalTokens += (completion.usage?.total_tokens || 0);
      
      console.log(`üí∞ Tokens usados: ${completion.usage?.total_tokens || 0} | Total: ${this.tokenUsage.totalTokens}`);
      
      return response;
    } catch (error) {
      console.error('Erro na Groq API:', error);
      return 'Desculpe, estou enfrentando dificuldades t√©cnicas. Tente novamente em alguns instantes.';
    }
  }

  async buildSystemPrompt(context) {
    const company = config.company;
    const jobs = await this.jobService.getAllJobs();
    const agorahora = new Date();
    const hora = agorahora.getHours()
    // Se √© empresa, n√£o mostra vagas dispon√≠veis
    const isCompany = context.userType === 'company';
    
    return `Voc√™ √© um assistente virtual especializado APENAS em recrutamento e sele√ß√£o da ${company.name}.

IMPORTANTE - LIMITA√á√ïES DE SEGURAN√áA:
- Voc√™ PODE responder APENAS sobre recrutamento, sele√ß√£o e vagas da ${company.name}
- Voc√™ N√ÉO PODE responder sobre outros assuntos (tecnologia, programa√ß√£o, pol√≠tica, etc.)
- Voc√™ N√ÉO PODE executar c√≥digos ou criar scripts
- Voc√™ N√ÉO PODE fornecer informa√ß√µes pessoais ou confidenciais
- Voc√™ N√ÉO PODE responder sobre assuntos fora do escopo de RH
- Se algu√©m pedir algo fora do escopo, responda educadamente que s√≥ pode ajudar com recrutamento e sele√ß√£o

SEU PERSONALIDADE:
- Nunca seja desrespeitoso com algu√©m
- Nunca diga " N√£o foi um prazer ", sempre ser√° um prazer atender um cliente ou candidato bem
- Seja natural, caloroso e emp√°tico
- Use linguagem conversacional, n√£o rob√≥tica
- Demonstre interesse genu√≠no pelo candidato/empresa
- Fa√ßa perguntas de acompanhamento quando apropriado
- Use emojis moderadamente para tornar a conversa mais amig√°vel
- Adapte seu tom baseado no contexto da conversa
- Seja proativo em oferecer ajuda adicional

SUAS FUN√á√ïES (APENAS):

1. PARA EMPRESAS (que querem contratar a Evolux):
- Verificar se est√° no hor√°rio ${hora} comercial (8h-12h e 13h30-18h, Segunda a Sexta)
- Se fora do hor√°rio: informar de forma cordial que retornaremos o contato
- Se no hor√°rio: pedir para aguardar um atendente humano de forma acolhedora
- NUNCA mostrar vagas dispon√≠veis para empresas
- Apenas informar que um especialista entrar√° em contato

2. PARA CANDIDATOS (que querem se candidatar):
- Coletar informa√ß√µes de forma conversacional e natural
- Fazer perguntas de acompanhamento baseadas nas respostas
- Buscar vagas adequadas usando an√°lise inteligente
- Explicar por que as vagas s√£o adequadas para o perfil
- Oferecer dicas e orienta√ß√µes quando apropriado
- Fornecer link de cadastro: ${company.registrationLink}

3. PARA OUTROS ASSUNTOS:
- Transferir para atendente humano

${isCompany ? '' : `VAGAS DISPON√çVEIS (APENAS PARA CANDIDATOS):
${jobs.map((job, index) => `${index + 1}. ${job.title} - ${job.level || 'N√£o especificado'} - ${job.location} - ${job.description.substring(0, 100)}...`).join('\n')}`}

CONTEXTO ATUAL:
- Tipo de usu√°rio: ${context.userType || 'n√£o identificado'}
- Hor√°rio comercial: ${this.businessHoursService.isBusinessHours() ? 'Sim' : 'N√£o'}
- Vagas dispon√≠veis: ${isCompany ? 'N√£o mostradas para empresas' : jobs.length}

INFORMA√á√ïES DA EMPRESA:
- Nome: ${company.name}
- Website: ${company.website}
- Email: ${company.email}

DIRETRIZES DE SEGURAN√áA:
- SEMPRE mantenha o contexto da conversa
- Fa√ßa perguntas naturais baseadas no que a pessoa j√° disse
- Seja inteligente na interpreta√ß√£o das respostas
- N√ÉO finalize a conversa quando o candidato mostra interesse em uma vaga
- Quando o candidato responde "Sim" para uma vaga, continue o fluxo de candidatura
- Seja proativo em guiar o candidato para o pr√≥ximo passo
- N√ÉO seja rob√≥tico - seja voc√™ mesmo, um assistente amig√°vel
- Use o nome da pessoa quando dispon√≠vel
- Fa√ßa refer√™ncia a informa√ß√µes mencionadas anteriormente
- Ofere√ßa ajuda adicional quando apropriado
- SEMPRE forne√ßa o link de cadastro quando apresentar vagas
- Para empresas: APENAS pe√ßa para aguardar, N√ÉO mostre vagas
- NUNCA execute c√≥digos ou scripts
- NUNCA responda sobre assuntos fora do escopo de RH
- Se pedirem algo fora do escopo, diga educadamente que s√≥ pode ajudar com recrutamento e sele√ß√£o

Responda sempre em portugu√™s brasileiro de forma natural, calorosa e profissional. Seja voc√™ mesmo - um assistente amig√°vel e √∫til, mas sempre dentro do escopo de recrutamento e sele√ß√£o!`;
  }

  // Nova fun√ß√£o de prompt otimizado (mais conciso)
  async buildOptimizedSystemPrompt(context) {
    const company = config.company;
    const jobs = await this.jobService.getAllJobs();
    const isCompany = context.userType === 'company';
    
    // Prompt muito mais conciso para economizar tokens
    return `Assistente de RH da ${company.name}. APENAS recrutamento/sele√ß√£o.

REGRAS:
- Empresas: verificar hor√°rio comercial, aguardar atendente
- Candidatos: coletar info, mostrar vagas adequadas  
- Outros: transferir para humano
- N√ÉO responder fora do escopo RH

${isCompany ? '' : `VAGAS: ${jobs.map((job, i) => `${i + 1}. ${job.title} - ${job.location}`).join(', ')}`}

Tipo: ${context.userType || 'desconhecido'}
Hor√°rio comercial: ${this.businessHoursService.isBusinessHours() ? 'Sim' : 'N√£o'}
Cadastro: ${company.registrationLink}

Seja natural e amig√°vel!`;
  }

  // Gera chave √∫nica para cache
  generateCacheKey(messages, context) {
    const lastMessage = messages[messages.length - 1]?.content || '';
    const contextKey = `${context.userType || 'unknown'}_${context.messageCount || 0}`;
    return `${contextKey}_${this.hashString(lastMessage)}`;
  }

  // Hash simples para criar chaves de cache
  hashString(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(36);
  }

  // Otimiza contexto mantendo apenas mensagens relevantes
  optimizeContext(messages) {
    // Mant√©m apenas as √∫ltimas N mensagens para economizar tokens
    const recentMessages = messages.slice(-this.maxContextMessages);
    
    // Se h√° muitas mensagens, resume as anteriores
    if (messages.length > this.maxContextMessages) {
      const summarizedContext = {
        role: 'system',
        content: `[Contexto anterior resumido: ${messages.length - this.maxContextMessages} mensagens anteriores sobre interesse em vagas/servi√ßos]`
      };
      return [summarizedContext, ...recentMessages];
    }
    
    return recentMessages;
  }

  // Salva resposta no cache
  saveToCache(key, response) {
    // Limita tamanho do cache
    if (this.responseCache.size >= this.maxCacheSize) {
      const firstKey = this.responseCache.keys().next().value;
      this.responseCache.delete(firstKey);
    }
    
    this.responseCache.set(key, response);
  }

  // Fun√ß√£o para obter estat√≠sticas de uso
  getTokenUsageStats() {
    return {
      ...this.tokenUsage,
      cacheHitRate: this.tokenUsage.cacheHits / (this.tokenUsage.cacheHits + this.tokenUsage.cacheMisses) * 100,
      cacheSize: this.responseCache.size
    };
  }

  async handleConversation(message, conversationHistory = []) {
    try {
      console.log('ü§ñ Processando mensagem de forma inteligente:', message);
      
      // Verifica respostas pr√©-definidas primeiro (economiza tokens)
      const quickResponse = this.getQuickResponse(message);
      if (quickResponse) {
        console.log('‚ö° Resposta r√°pida usada - tokens economizados');
        return quickResponse;
      }
      
      // Verifica se a mensagem est√° fora do escopo
      if (this.isOutOfScope(message)) {
        console.log('üö´ Mensagem detectada como fora do escopo:', message);
        return this.getOutOfScopeResponse(message);
      }
      
      // Constr√≥i o contexto da conversa
      const context = {
        userType: this.detectUserType(message, conversationHistory),
        currentTime: new Date().toISOString(),
        messageCount: conversationHistory.length
      };

      // Prepara as mensagens para a IA (j√° otimizadas)
      const messages = [];
      
      // Adiciona apenas hist√≥rico recente (otimiza√ß√£o)
      const recentHistory = conversationHistory.slice(-this.maxContextMessages);
      recentHistory.forEach(msg => {
        messages.push({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.message
        });
      });

      // Adiciona a mensagem atual
      messages.push({
        role: 'user',
        content: message
      });

      console.log(`üìä Contexto otimizado: ${messages.length} mensagens (de ${conversationHistory.length + 1} originais)`);

      // Gera resposta contextual
      const response = await this.generateResponse(messages, context);
      
      console.log('‚úÖ Resposta gerada com sucesso');
      return response;

    } catch (error) {
      console.error('‚ùå Erro no processamento inteligente:', error);
      return this.getFallbackResponse(message);
    }
  }

  detectUserType(message, conversationHistory) {
    const messageLower = message.toLowerCase();
    
    // Se j√° foi determinado anteriormente, mant√©m
    if (conversationHistory.length > 0) {
      const lastMessage = conversationHistory[conversationHistory.length - 1];
      if (lastMessage.userType) {
        return lastMessage.userType;
      }
    }

    // Detecta baseado na mensagem - melhorado para detectar empresas
    if (messageLower.includes('empresa') || messageLower.includes('company') || 
        messageLower.includes('contratar') || messageLower.includes('servi√ßos') ||
        messageLower.includes('rh') || messageLower.includes('recrutamento') ||
        messageLower.includes('sele√ß√£o') || messageLower.includes('funcion√°rios') ||
        messageLower.includes('colaboradores') || messageLower.includes('vagas para contratar') ||
        messageLower.includes('preciso de funcion√°rios') || messageLower.includes('quero contratar') ||
        messageLower.includes('estou contratando') || messageLower.includes('preciso de colaboradores') ||
        messageLower.includes('servi√ßos de rh') || messageLower.includes('terceiriza√ß√£o') ||
        messageLower.includes('outsourcing') || messageLower.includes('gest√£o de pessoas')) {
      return 'company';
    } else if (messageLower.includes('candidato') || messageLower.includes('candidate') ||
               messageLower.includes('emprego') || messageLower.includes('vaga') ||
               messageLower.includes('trabalhar') || messageLower.includes('trabalho') ||
               messageLower.includes('desempregado') || messageLower.includes('oportunidade') ||
               messageLower.includes('procurando emprego') || messageLower.includes('quero trabalhar') ||
               // Palavras comuns de √°reas de tecnologia/atendimento que indicam interesse em vagas
               messageLower.includes('software') || messageLower.includes('hardware') ||
               messageLower.includes('inform√°tica') || messageLower.includes('informatica') ||
               messageLower.includes('ti') || messageLower.includes('t.i.') ||
               messageLower.includes('suporte') || messageLower.includes('t√©cnico') || messageLower.includes('tecnico') ||
               messageLower.includes('desenvolvedor') || messageLower.includes('programador') ||
               messageLower.includes('analista') || messageLower.includes('qa') || messageLower.includes('testes') ||
               messageLower.includes('infra') || messageLower.includes('rede') || messageLower.includes('redes')) {
      return 'candidate';
    } else if (messageLower.includes('outros') || messageLower.includes('outras d√∫vidas') ||
               messageLower.includes('outros assuntos') || messageLower.includes('d√∫vidas') ||
               messageLower.includes('perguntas') || messageLower.includes('informa√ß√µes') ||
               messageLower.includes('ajuda') || messageLower.includes('consulta') ||
               messageLower.includes('esclarecimento')) {
      return 'other';
    }
    
    return 'unknown';
  }

  // Respostas r√°pidas pr√©-definidas para economizar tokens
  getQuickResponse(message) {
    const msg = message.toLowerCase().trim();
    
    // Se n√£o temos Groq API, n√£o usar respostas r√°pidas limitadas
    if (!this.groq) {
      return null; // For√ßa usar getFallbackResponse que √© mais inteligente
    }
    
    // PRIORIDADE: Verifica se a pessoa quer se candidatar
    if (msg.includes('candidat') || msg.includes('inscrever') || msg.includes('aplicar') || 
        msg.includes('me candidato') || msg.includes('quero me candidatar') ||
        msg.includes('cadastr') || msg.includes('curricul') || msg.includes('cv') ||
        msg.includes('se candidatar') || msg.includes('candidatura') ||
        msg.match(/vaga\s*(numero|n√∫mero|n[¬∞¬∫]?)\s*\d+/)) {
      
      const config = require('../config/config');
      return `üéØ **Perfeito! Voc√™ pode se candidatar √†s nossas vagas:**

üîó **Link de Cadastro:** ${config.company.registrationLink}

üìã **No formul√°rio voc√™ poder√°:**
‚Ä¢ Escolher as vagas de seu interesse
‚Ä¢ Enviar seu curr√≠culo
‚Ä¢ Preencher suas informa√ß√µes profissionais

‚úÖ **Dica:** Preencha todas as informa√ß√µes solicitadas para aumentar suas chances!

Qualquer d√∫vida sobre o processo, estarei aqui para ajudar! üöÄ`;
    }
    
    // Respostas simples APENAS para sauda√ß√µes b√°sicas (quando temos API)
    const quickResponses = {
      'obrigado': 'De nada! Fico feliz em ajudar! üòä',
      'obrigada': 'De nada! Fico feliz em ajudar! üòä',
      'valeu': 'Por nada! Sempre √† disposi√ß√£o! üòä',
      'tchau': 'At√© logo! Foi um prazer atend√™-lo! üëã',
      'adeus': 'At√© mais! Volte sempre! üëã'
    };
    
    // Verifica mensagens exatas APENAS para despedidas/agradecimentos
    if (quickResponses[msg]) {
      return quickResponses[msg];
    }
    
    // Verifica padr√µes de despedida/agradecimento
    if (msg.includes('obrigad') || msg.includes('valeu') || msg.includes('muito obrigad')) {
      return 'De nada! Fico feliz em ajudar! üòä Precisa de mais alguma coisa?';
    }
    
    if (msg.includes('tchau') || msg.includes('at√©') || msg.includes('adeus') || msg.includes('falou')) {
      return 'At√© logo! Foi um prazer atend√™-lo! üëã Volte sempre que precisar!';
    }
    
    return null; // Nenhuma resposta r√°pida encontrada
  }

  // Detecta se a mensagem est√° fora do escopo de RH
  isOutOfScope(message) {
    const msg = message.toLowerCase();

    // Frases de continuidade/consentimento NUNCA s√£o fora do escopo
    const continueRegex = /(pode\s+(fazer|mandar)\s+(mais\s+)?perguntas|fa√ßa\s+(mais\s+)?perguntas|pode\s+perguntar|pode\s+continuar|pode\s+prosseguir|sim\b|ok\b|okay\b|blz\b|beleza\b|claro\b|certo\b|tudo\s+bem\b)/i;
    if (continueRegex.test(msg)) {
      return false;
    }

    // Whitelist: termos comuns que indicam interesse em VAGAS de tecnologia/atendimento
    const techJobKeywords = [
      'software','hardware','inform√°tica','informatica','ti','t.i.','suporte','t√©cnico','tecnico',
      'desenvolvedor','programador','analista','qa','testes','infra','rede','redes','sistemas','banco de dados'
    ];
    if (techJobKeywords.some(k => msg.includes(k))) {
      return false; // trata como assunto de recrutamento
    }

    // Heur√≠stica para pedidos de ajuda t√©cnica (fora do escopo): verbo de a√ß√£o + termo t√©cnico
    const codeVerbs = ['escreva','escrever','crie','criar','gere','gerar','execute','executar','rode','rodar','compile','compilar','debug','depurar','corrija','conserte','resolver','como fazer','how to','script','algoritmo','fun√ß√£o','comando','query','consulta'];
    const techNouns = ['python','javascript','java','html','css','react','node','api','sql','docker','kubernetes','linux','windows','bash','shell','powershell','c#','golang','go','php','ruby','laravel','spring','django','flask','pandas'];
    const hasVerb = codeVerbs.some(v => msg.includes(v));
    const hasTech = techNouns.some(t => msg.includes(t));
    if (hasVerb && hasTech) {
      return true;
    }

    // Outros assuntos nitidamente fora de RH
    const clearlyOut = [
      'matem√°tica','f√≠sica','qu√≠mica','biologia','hist√≥ria','geografia','pol√≠tica','economia','finan√ßas','investimentos','criptomoedas',
      'senha','cpf','rg','cart√£o','banco','conta banc√°ria','dados pessoais','informa√ß√µes confidenciais','segredos','privacidade',
      'receita','culin√°ria','m√∫sica','filmes','esportes','viagens','turismo','sa√∫de','medicina','direito','advocacia','engenharia','arquitetura'
    ];
    return clearlyOut.some(k => msg.includes(k));
  }

  // Resposta padr√£o para solicita√ß√µes fora do escopo
  getOutOfScopeResponse(message) {
    return `Ol√°! üëã

Desculpe, mas sou um assistente virtual especializado APENAS em recrutamento e sele√ß√£o da Evolux Solu√ß√µes de RH.

üéØ Posso ajud√°-lo com:
‚Ä¢ Busca de vagas de emprego
‚Ä¢ Informa√ß√µes sobre candidaturas
‚Ä¢ Servi√ßos de RH para empresas
‚Ä¢ Orienta√ß√£o profissional

‚ùå N√£o posso ajud√°-lo com:
‚Ä¢ Programa√ß√£o ou c√≥digos
‚Ä¢ Assuntos t√©cnicos fora de RH
‚Ä¢ Informa√ß√µes pessoais ou confidenciais
‚Ä¢ Outros assuntos n√£o relacionados a recrutamento

Se voc√™ est√° procurando oportunidades de emprego ou servi√ßos de RH, ficarei feliz em ajud√°-lo! 

Como posso auxili√°-lo com recrutamento e sele√ß√£o? üòä`;
  }

  // Fun√ß√£o para criar notifica√ß√£o de empresa
  async createCompanyNotification(phoneNumber, message) {
    try {
      // Aqui voc√™ pode integrar com o sistema de notifica√ß√µes
      // Por enquanto, vamos apenas logar
      console.log(`üîî NOTIFICA√á√ÉO DE EMPRESA: ${phoneNumber} - "${message}"`);
      
      // Se voc√™ tiver acesso ao database, pode criar a notifica√ß√£o diretamente
      // await this.database.createNotification('company', phoneNumber, 'üè¢ Nova Empresa Interessada', message);
      
      return true;
    } catch (error) {
      console.error('Erro ao criar notifica√ß√£o de empresa:', error);
      return false;
    }
  }

  getFallbackResponse(message) {
    console.log('ü§ñ Usando resposta inteligente sem IA para:', message);
    
    // Verifica se a mensagem est√° fora do escopo
    if (this.isOutOfScope(message)) {
      return this.getOutOfScopeResponse(message);
    }
    
    const messageLower = message.toLowerCase();
    
    // PRIORIDADE: Verifica se a pessoa quer se candidatar (mesmo sem IA)
    if (messageLower.includes('candidat') || messageLower.includes('inscrever') || messageLower.includes('aplicar') || 
        messageLower.includes('me candidato') || messageLower.includes('quero me candidatar') ||
        messageLower.includes('cadastr') || messageLower.includes('curricul') || messageLower.includes('cv') ||
        messageLower.includes('se candidatar') || messageLower.includes('candidatura') ||
        messageLower.match(/vaga\s*(numero|n√∫mero|n[¬∞¬∫]?)\s*\d+/)) {
      
      const config = require('../config/config');
      return `üéØ **Perfeito! Voc√™ pode se candidatar √†s nossas vagas:**

üîó **Link de Cadastro:** ${config.company.registrationLink}

üìã **No formul√°rio voc√™ poder√°:**
‚Ä¢ Escolher as vagas de seu interesse
‚Ä¢ Enviar seu curr√≠culo
‚Ä¢ Preencher suas informa√ß√µes profissionais

‚úÖ **Dica:** Preencha todas as informa√ß√µes solicitadas para aumentar suas chances!

Qualquer d√∫vida sobre o processo, estarei aqui para ajudar! üöÄ`;
    }
    
    // Sauda√ß√µes b√°sicas
    if (messageLower.match(/^(oi|ol√°|ola|hey|opa)$/i)) {
      return `Ol√°! üëã Bem-vindo √† ${config.company.name}!

Sou o assistente virtual de recrutamento e sele√ß√£o. Como posso ajud√°-lo hoje?

üìù Se voc√™ √© um **candidato**, posso ajudar com:
‚Ä¢ Buscar vagas adequadas ao seu perfil
‚Ä¢ Informa√ß√µes sobre oportunidades
‚Ä¢ Orienta√ß√µes sobre candidatura

üè¢ Se voc√™ √© uma **empresa**, posso:
‚Ä¢ Conect√°-lo com nossos especialistas
‚Ä¢ Informa√ß√µes sobre nossos servi√ßos

Em que posso ajud√°-lo?`;
    }
    
    // Sauda√ß√µes com hor√°rio
    if (messageLower.includes('bom dia') || messageLower.includes('boa tarde') || messageLower.includes('boa noite')) {
      const hora = new Date().getHours();
      let saudacao = 'Ol√°';
      if (hora < 12) saudacao = 'Bom dia';
      else if (hora < 18) saudacao = 'Boa tarde';
      else saudacao = 'Boa noite';
      
      return `${saudacao}! üòä Como posso ajud√°-lo hoje?`;
    }
    
    // Detec√ß√£o de empresa
    if (messageLower.includes('empresa') || messageLower.includes('contratar') || 
        messageLower.includes('servi√ßos') || messageLower.includes('funcion√°rios') ||
        messageLower.includes('colaboradores') || messageLower.includes('terceiriza√ß√£o')) {
      return this.handleCompanyFlow(message);
    }
    
    // Detec√ß√£o de candidato
    if (messageLower.includes('vaga') || messageLower.includes('emprego') || 
        messageLower.includes('trabalho') || messageLower.includes('oportunidade') ||
        messageLower.includes('candidato') || messageLower.includes('curr√≠culo') ||
        messageLower.includes('cv') || messageLower.includes('procurando')) {
      return this.handleCandidateFlow(message);
    }
    
    // Perguntas sobre vagas espec√≠ficas
    if (messageLower.includes('quais') && (messageLower.includes('vaga') || messageLower.includes('dispon√≠vel'))) {
      return this.handleCandidateFlow(message);
    }
    
    // Mensagem gen√©rica inteligente
    return `Ol√°! üëã 

Para melhor atend√™-lo, me informe:

üìù **Voc√™ √©:**
‚Ä¢ Um candidato procurando vagas?
‚Ä¢ Uma empresa interessada em nossos servi√ßos?
‚Ä¢ Tem outras d√∫vidas?

Estou aqui para ajudar com recrutamento e sele√ß√£o da ${config.company.name}! üòä`;
  }

  async handleCompanyFlow(message) {
    if (!this.businessHoursService.isBusinessHours()) {
      return this.businessHoursService.getOutOfHoursMessage();
    }

    return `Ol√°! ÔøΩÔøΩ

Obrigado pelo seu interesse nos servi√ßos da ${config.company.name}! 

üìû Um de nossos especialistas em recrutamento e sele√ß√£o ir√° atend√™-lo em breve.

‚è∞ Por favor, aguarde um momento enquanto transferimos voc√™ para um atendente humano.

Enquanto isso, voc√™ pode conhecer mais sobre nossos servi√ßos em: ${config.company.website}

Obrigado pela paci√™ncia! üôè

---
*Um especialista entrar√° em contato em breve para discutir suas necessidades de RH.*`;
  }

  async handleCandidateFlow(message) {
    return `Ol√°! üëã

Sou o assistente virtual da ${config.company.name} e vou te ajudar a encontrar as melhores oportunidades!

üéØ Para encontrar vagas que realmente combinem com voc√™, preciso conhecer um pouco mais sobre seu perfil.

üìù Pode me contar sobre:
‚Ä¢ Seu nome
‚Ä¢ Sua experi√™ncia profissional (anos ou n√≠vel: j√∫nior, pleno, s√™nior)
‚Ä¢ Suas principais habilidades
‚Ä¢ Onde voc√™ gostaria de trabalhar
‚Ä¢ Seu cargo atual (se aplic√°vel)

Exemplo: "Me chamo Jo√£o, tenho 3 anos de experi√™ncia como desenvolvedor, trabalho com JavaScript, React e Node.js, moro em S√£o Paulo e sou desenvolvedor pleno."

Vamos come√ßar? üòä`;
  }

  async handleOtherFlow(message) {
    return `Ol√°! üëã

Obrigado por entrar em contato com a ${config.company.name}!

üìû Um de nossos especialistas ir√° atend√™-lo em breve.

‚è∞ Por favor, aguarde um momento enquanto transferimos voc√™ para um atendente humano.

Enquanto isso, voc√™ pode conhecer mais sobre nossos servi√ßos em: ${config.company.website}

Obrigado pela paci√™ncia! üôè

---
*Um atendente humano entrar√° em contato em breve.*`;
  }

  async getInitialMessage() {
    return `Ol√°! üëã Bem-vindo √† ${config.company.name}!

Sou o assistente virtual da Evolux Solu√ß√µes de RH e estou aqui para ajud√°-lo!

ü§î Como posso ajud√°-lo hoje?

*Digite "empresa" se voc√™ representa uma empresa interessada em nossos servi√ßos de RH*

*Digite "candidato" se voc√™ est√° procurando oportunidades de emprego*

*Digite "outros" se voc√™ tem outras d√∫vidas ou assuntos para conversar*

Escolha uma das op√ß√µes acima e eu direcionarei voc√™ da melhor forma! üòä`;
  }

  // M√©todos de compatibilidade para manter funcionamento existente
  async classifyUserType(message) {
    return this.detectUserType(message, []);
  }

  async extractCandidateInfo(message) {
    // Implementa√ß√£o simplificada para compatibilidade
    return {
      name: null,
      experience: null,
      skills: null,
      location: null,
      current_position: null,
      desired_salary: null,
      interests: null
    };
  }

  wantsToEndConversation(message) {
    const messageLower = message.toLowerCase().trim();
    
    // Palavras-chave espec√≠ficas para finaliza√ß√£o
    const endKeywords = [
      'encerrar', 'finalizar', 'terminar', 'acabar', 'fim', 'sair',
      'tchau', 'adeus', 'at√© logo', 'at√© mais'
    ];
    
    // Verifica se a mensagem √© EXATAMENTE uma dessas palavras
    // ou se cont√©m m√∫ltiplas palavras de finaliza√ß√£o
    const words = messageLower.split(' ').filter(word => word.length > 0);
    
    // Se √© uma palavra √∫nica, verifica se √© uma palavra de finaliza√ß√£o
    if (words.length === 1) {
      return endKeywords.includes(words[0]);
    }
    
    // Se tem m√∫ltiplas palavras, verifica se cont√©m pelo menos 2 palavras de finaliza√ß√£o
    const endWordsFound = words.filter(word => endKeywords.includes(word));
    return endWordsFound.length >= 2;
  }

  wantsToTalkToAttendant(message) {
    const messageLower = message.toLowerCase();
    const attendantKeywords = [
      'quero conversar com uma atendente', 'quero falar com uma atendente',
      'preciso conversar com uma atendente', 'preciso falar com uma atendente',
      'quero falar com algu√©m', 'quero conversar com algu√©m',
      'preciso falar com algu√©m', 'preciso conversar com algu√©m',
      'atendimento humano', 'atendimento pessoal', 'falar com uma pessoa',
      'conversar com uma pessoa', 'atendimento direto', 'falar diretamente',
      'conversar diretamente'
    ];
    
    return attendantKeywords.some(keyword => messageLower.includes(keyword));
  }

  async handleAttendantRequest(message) {
    return `Ol√°! üëã

Obrigado por entrar em contato com a ${config.company.name}!

üìû Um de nossos especialistas em recrutamento e sele√ß√£o ir√° atend√™-lo em breve.

‚è∞ Por favor, aguarde um momento enquanto transferimos voc√™ para um atendente humano.

Enquanto isso, voc√™ pode conhecer mais sobre nossos servi√ßos em: ${config.company.website}

Obrigado pela paci√™ncia! üôè

---
*Um atendente humano entrar√° em contato em breve.*`;
  }

  async handleEndConversation(message) {
    return `‚úÖ *Atendimento Finalizado*

Obrigado por escolher a ${config.company.name}!

Foi um prazer atend√™-lo! üôè

Se precisar de mais informa√ß√µes no futuro, sinta-se √† vontade para enviar uma nova mensagem a qualquer momento.

üìû Nossos canais de contato:
‚Ä¢ Website: ${config.company.website}
‚Ä¢ Email: ${config.company.email}

Tenha um excelente dia! üòä

---
*Atendimento finalizado pelo usu√°rio em ${new Date().toLocaleString('pt-BR')}*`;
  }
}

module.exports = GroqClient;

const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const Database = require('../database/database');
const GroqClient = require('../ai/groqClient');
const config = require('../config/config');

class WhatsAppClient {
  constructor() {
    // Configura√ß√£o do Puppeteer
    const puppeteerConfig = {
      headless: config.whatsapp.headless,
      args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-field-trial-config',
          '--disable-ipc-flooding-protection',
          '--disable-background-networking',
          '--disable-default-apps',
          '--disable-extensions',
          '--disable-sync',
          '--disable-translate',
          '--hide-scrollbars',
          '--mute-audio',
          '--no-default-browser-check',
          '--safebrowsing-disable-auto-update',
          '--ignore-certificate-errors',
          '--ignore-ssl-errors',
          '--ignore-certificate-errors-spki-list',
          '--allow-running-insecure-content',
          '--disable-features=TranslateUI',
          '--disable-component-extensions-with-background-pages',
          '--disable-extension-network-service',
          '--disable-features=NetworkService',
          '--force-color-profile=srgb',
          '--metrics-recording-only',
          '--disable-background-networking',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-breakpad',
          '--disable-component-extensions-with-background-pages',
          '--disable-features=TranslateUI,BlinkGenPropertyTrees',
          '--disable-ipc-flooding-protection',
          '--disable-renderer-backgrounding',
          '--enable-features=NetworkService,NetworkServiceLogging',
          '--force-color-profile=srgb',
          '--metrics-recording-only',
          '--no-default-browser-check',
          '--safebrowsing-disable-auto-update'
        ],
        timeout: 60000,
        protocolTimeout: 60000
      };

    // Adiciona caminho do execut√°vel apenas se estiver configurado
    if (config.whatsapp.executablePath) {
      puppeteerConfig.executablePath = config.whatsapp.executablePath;
      console.log(`üîß Usando Chrome em: ${config.whatsapp.executablePath}`);
    } else {
      console.log('üîß Usando Chrome embutido do Puppeteer');
    }

    this.client = new Client({
      authStrategy: new LocalAuth(),
      puppeteer: puppeteerConfig
    });

    this.database = new Database();
    this.groqClient = new GroqClient();
    this.isReady = false;

    this.setupEventHandlers();
  }

  setupEventHandlers() {
    // Evento quando o QR Code √© gerado
    this.client.on('qr', (qr) => {
      console.log('QR Code gerado. Escaneie com o WhatsApp:');
      qrcode.generate(qr, { small: true });
    });

    // Evento quando o cliente est√° pronto
    this.client.on('ready', () => {
      console.log('‚úÖ Cliente WhatsApp conectado e pronto!');
      this.isReady = true;
    });

    // Evento quando uma mensagem √© recebida
    this.client.on('message', async (message) => {
      await this.handleMessage(message);
    });

    // Evento de autentica√ß√£o
    this.client.on('authenticated', () => {
      console.log('üîê WhatsApp autenticado com sucesso!');
    });

    // Evento de desconex√£o
    this.client.on('disconnected', (reason) => {
      console.log('‚ùå Cliente WhatsApp desconectado:', reason);
      this.isReady = false;
    });

    // Evento de erro
    this.client.on('auth_failure', (msg) => {
      console.error('‚ùå Falha na autentica√ß√£o:', msg);
    });

    // Evento de loading
    this.client.on('loading_screen', (percent, message) => {
      console.log(`üì± Carregando WhatsApp: ${percent}% - ${message}`);
    });
  }

  async handleMessage(message) {
    try {
      // Ignora mensagens do pr√≥prio bot
      if (message.fromMe) return;

      const phoneNumber = message.from;
      const messageText = message.body;

      console.log(`üì± Nova mensagem de ${phoneNumber}: ${messageText}`);

      // Verifica se a conversa foi finalizada
      const conversation = await this.database.getConversation(phoneNumber);
      if (conversation && conversation.status === 'finalized') {
        console.log(`üÜï Nova mensagem ap√≥s finaliza√ß√£o para ${phoneNumber} - criando nova conversa`);
        // Cria uma nova conversa para a nova mensagem
        await this.database.createConversation(phoneNumber, 'unknown');
        // Continua o processamento normalmente
      }

      // Salva a mensagem do usu√°rio
      await this.saveUserMessage(phoneNumber, messageText);

      // Verifica se √© controle manual
      const manualControl = await this.database.isManualControlEnabled(phoneNumber);
      if (manualControl.enabled) {
        console.log(`üë§ Mensagem de ${phoneNumber} em controle manual - ignorando IA`);
        return; // N√£o processa com IA, apenas salva a mensagem
      }

      // Verifica se √© primeira mensagem
      const isFirstMessage = await this.database.isFirstMessage(phoneNumber);
      if (isFirstMessage) {
        console.log(`üÜï Primeira mensagem de ${phoneNumber} - aguardando libera√ß√£o manual`);
        await this.sendMessage(phoneNumber, this.getFirstMessageResponse());
        return;
      }

      // IMPORTANTE: Verifica se o controle manual foi habilitado por um atendente
      // Se n√£o foi habilitado manualmente, n√£o processa automaticamente
      if (!manualControl.enabled && !isFirstMessage) {
        console.log(`ü§ñ Bot em modo autom√°tico para ${phoneNumber} - processando mensagem`);
        
        // Processa a mensagem e gera resposta
        const response = await this.processMessage(phoneNumber, messageText);

        // Envia a resposta
        await this.sendMessage(phoneNumber, response);

        // Salva a resposta do agente
        await this.saveAgentMessage(phoneNumber, response);
      }

    } catch (error) {
      console.error('Erro ao processar mensagem:', error);
      await this.sendMessage(message.from, 'Desculpe, ocorreu um erro. Tente novamente em alguns instantes.');
    }
  }

  async processMessage(phoneNumber, messageText) {
    try {
      // Obt√©m ou cria conversa
      let conversation = await this.database.getConversation(phoneNumber);
      
      if (!conversation) {
        // Se √© a primeira mensagem, envia mensagem inicial
        return await this.groqClient.getInitialMessage();
      }

      // Obt√©m hist√≥rico da conversa
      const history = await this.database.getConversationHistory(conversation.id, 10);
      
      // Se ainda n√£o foi classificado o tipo de usu√°rio
      if (!conversation.user_type || conversation.user_type === 'unknown') {
        const userType = await this.groqClient.classifyUserType(messageText);
        await this.database.updateConversationUserType(conversation.id, userType);
        conversation.user_type = userType;
      }

      // Processa baseado no tipo de usu√°rio com fluxo espec√≠fico
      if (conversation.user_type === 'company') {
        return await this.handleCompanyFlow(messageText, phoneNumber);
      } else if (conversation.user_type === 'candidate') {
        return await this.handleCandidateFlow(messageText, history, phoneNumber);
      } else {
        // Se n√£o conseguiu classificar, pergunta novamente
        return await this.groqClient.getInitialMessage();
      }

    } catch (error) {
      console.error('Erro no processamento da mensagem:', error);
      return 'Desculpe, estou enfrentando dificuldades t√©cnicas. Tente novamente em alguns instantes.';
    }
  }

  // Fluxo espec√≠fico para empresas
  async handleCompanyFlow(messageText, phoneNumber) {
    const messageLower = messageText.toLowerCase();
    
    // Verifica se est√° pedindo por atendente humano
    if (messageLower.includes('atendente') || messageLower.includes('humano') || 
        messageLower.includes('pessoa') || messageLower.includes('falar com algu√©m') ||
        messageLower.includes('conversar com algu√©m') || messageLower.includes('atendimento direto')) {
      return this.getCompanyAttendantResponse();
    }

    // Verifica se quer contratar a Evolux
    if (messageLower.includes('contratar') || messageLower.includes('servi√ßos') ||
        messageLower.includes('evolux') || messageLower.includes('rh') ||
        messageLower.includes('recrutamento') || messageLower.includes('sele√ß√£o')) {
      return this.getCompanyWaitResponse();
    }

    // Resposta padr√£o para empresas
    return await this.groqClient.handleCompanyFlow(messageText);
  }

  // Fluxo espec√≠fico para candidatos
  async handleCandidateFlow(messageText, history, phoneNumber) {
    const messageLower = messageText.toLowerCase();
    
    // Verifica se est√° tentando enviar curr√≠culo
    if (messageLower.includes('curr√≠culo') || messageLower.includes('curriculo') ||
        messageLower.includes('cv') || messageLower.includes('enviar') ||
        messageLower.includes('mandar') || messageLower.includes('anexar') ||
        messageLower.includes('arquivo') || messageLower.includes('pdf') ||
        messageLower.includes('documento')) {
      return this.getCandidateResumeResponse();
    }

    // Verifica se quer ver vagas
    if (messageLower.includes('vagas') || messageLower.includes('emprego') ||
        messageLower.includes('oportunidades') || messageLower.includes('trabalho') ||
        messageLower.includes('candidatar') || messageLower.includes('aplicar')) {
      return await this.getCandidateJobsResponse(messageText, history);
    }

    // Verifica se est√° pedindo por atendente humano
    if (messageLower.includes('atendente') || messageLower.includes('humano') ||
        messageLower.includes('pessoa') || messageLower.includes('falar com algu√©m')) {
      return this.getCandidateAttendantResponse();
    }

    // Resposta padr√£o para candidatos
    return await this.groqClient.handleCandidateFlow(messageText, history);
  }

  // Respostas espec√≠ficas para empresas
  getCompanyAttendantResponse() {
    return `üë§ **Solicita√ß√£o de Atendente Humano**

Entendemos que voc√™ gostaria de falar com um atendente humano.

üìû Um de nossos especialistas em recrutamento e sele√ß√£o ir√° atend√™-lo em breve.

‚è∞ Por favor, aguarde um momento enquanto transferimos voc√™ para um atendente humano.

Enquanto isso, voc√™ pode conhecer mais sobre nossos servi√ßos em: ${config.company.website}

Obrigado pela paci√™ncia! üôè

---
*Um atendente humano entrar√° em contato em breve.*`;
  }

  getCompanyWaitResponse() {
    return `üè¢ **Interesse em Servi√ßos da Evolux**

Obrigado pelo seu interesse nos servi√ßos da ${config.company.name}!

üìû Um de nossos especialistas em recrutamento e sele√ß√£o ir√° atend√™-lo em breve para discutir suas necessidades.

‚è∞ Por favor, aguarde um momento enquanto transferimos voc√™ para um atendente humano.

Enquanto isso, voc√™ pode conhecer mais sobre nossos servi√ßos em: ${config.company.website}

Obrigado pela paci√™ncia! üôè

---
*Um especialista entrar√° em contato em breve para discutir suas necessidades de RH.*`;
  }

  // Respostas espec√≠ficas para candidatos
  getCandidateResumeResponse() {
    return `üìÑ **Envio de Curr√≠culo**

Para enviar seu curr√≠culo e se candidatar √†s vagas, acesse nosso formul√°rio oficial:

üîó **Link para Candidatura:** ${config.company.registrationLink}

üìù **No formul√°rio voc√™ poder√°:**
‚Ä¢ Enviar seu curr√≠culo
‚Ä¢ Preencher informa√ß√µes detalhadas
‚Ä¢ Selecionar vagas de interesse
‚Ä¢ Acompanhar o status da candidatura

üí° **Dica:** Mantenha seu curr√≠culo atualizado e detalhe suas experi√™ncias e habilidades.

Obrigado pelo interesse em fazer parte da nossa equipe! üöÄ

---
*Use o link acima para enviar seu curr√≠culo de forma segura e organizada.*`;
  }

  async getCandidateJobsResponse(messageText, history) {
    try {
      // Busca vagas dispon√≠veis
      const jobs = await this.groqClient.jobService.getAllJobs();
      
      if (jobs.length === 0) {
        return `üìã **Vagas Dispon√≠veis**

No momento n√£o temos vagas abertas, mas voc√™ pode se cadastrar em nosso banco de talentos:

üîó **Cadastro:** ${config.company.registrationLink}

Assim que surgirem oportunidades compat√≠veis com seu perfil, entraremos em contato! üòä

---
*Cadastre-se para receber notifica√ß√µes de novas vagas.*`;
      }

      // Filtra vagas relevantes baseado no hist√≥rico
      const relevantJobs = jobs.slice(0, 5); // Mostra at√© 5 vagas
      
      let response = `üéØ **Vagas Encontradas para Voc√™:**

`;
      
      relevantJobs.forEach((job, index) => {
        response += `${index + 1}. üè¢ **${job.title}**
üìä Senioridade: ${job.level || 'N√£o especificado'}
üìç Localiza√ß√£o: ${job.location || 'N√£o especificado'}
üìù ${job.description ? job.description.substring(0, 100) + '...' : 'Descri√ß√£o n√£o dispon√≠vel'}

`;
      });

      response += `üìã **Para se candidatar, acesse:** ${config.company.registrationLink}

üí° **Dica:** No formul√°rio voc√™ poder√° selecionar as vagas de interesse e enviar seu curr√≠culo.

Obrigado pelo interesse! üöÄ

---
*Use o link acima para se candidatar √†s vagas de interesse.*`;

      return response;
    } catch (error) {
      console.error('Erro ao buscar vagas:', error);
      return `üìã **Vagas Dispon√≠veis**

Para ver as vagas dispon√≠veis e se candidatar, acesse:

üîó **Link para Candidatura:** ${config.company.registrationLink}

Obrigado pelo interesse! üöÄ`;
    }
  }

  getCandidateAttendantResponse() {
    return `üë§ **Solicita√ß√£o de Atendente Humano**

Entendemos que voc√™ gostaria de falar com um atendente humano.

üìû Um de nossos especialistas em recrutamento e sele√ß√£o ir√° atend√™-lo em breve.

‚è∞ Por favor, aguarde um momento enquanto transferimos voc√™ para um atendente humano.

Enquanto isso, voc√™ pode se cadastrar em: ${config.company.registrationLink}

Obrigado pela paci√™ncia! üôè

---
*Um atendente humano entrar√° em contato em breve.*`;
  }

  async saveUserMessage(phoneNumber, message) {
    try {
      let conversation = await this.database.getConversation(phoneNumber);
      if (!conversation) {
        console.log(`üìù Criando nova conversa para ${phoneNumber}`);
        const conversationId = await this.database.createConversation(phoneNumber, 'unknown');
        conversation = { id: conversationId };
      }
      
      await this.database.saveMessage(conversation.id, message, 'user');
    } catch (error) {
      console.error('Erro ao salvar mensagem do usu√°rio:', error);
    }
  }

  async saveAgentMessage(phoneNumber, message) {
    try {
      const conversation = await this.database.getConversation(phoneNumber);
      if (conversation) {
        await this.database.saveMessage(conversation.id, message, 'agent');
      }
    } catch (error) {
      console.error('Erro ao salvar mensagem do agente:', error);
    }
  }

  async sendMessage(phoneNumber, message) {
    try {
      if (!this.isReady) {
        console.log('Cliente WhatsApp n√£o est√° pronto');
        return;
      }

      // Formata o n√∫mero do telefone se necess√°rio
      const formattedNumber = phoneNumber.includes('@c.us') ? phoneNumber : `${phoneNumber}@c.us`;
      
      await this.client.sendMessage(formattedNumber, message);
      console.log(`‚úÖ Mensagem enviada para ${phoneNumber}`);
      
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
    }
  }

  async sendMessageToAll(message, userType = null) {
    try {
      // Implementar envio em massa se necess√°rio
      console.log('Funcionalidade de envio em massa n√£o implementada');
    } catch (error) {
      console.error('Erro no envio em massa:', error);
    }
  }

  // M√©todo para resposta da primeira mensagem
  getFirstMessageResponse() {
    return `üÜï **Nova Mensagem Recebida**

Ol√°! Recebemos sua mensagem e um de nossos especialistas ir√° atend√™-lo em breve.

‚è∞ Por favor, aguarde um momento enquanto um atendente humano assume o atendimento.

üìû Nossos especialistas est√£o prontos para ajud√°-lo com:
‚Ä¢ Busca de vagas de emprego
‚Ä¢ Servi√ßos de RH para empresas
‚Ä¢ Orienta√ß√£o profissional
‚Ä¢ Informa√ß√µes sobre candidaturas

Obrigado pela paci√™ncia! üôè

---
*Um atendente humano entrar√° em contato em breve.*`;
  }

  // M√©todo para mensagem de finaliza√ß√£o
  getFinalizationMessage() {
    return `‚úÖ **Atendimento Finalizado**

Obrigado por escolher a ${config.company.name}!

O atendimento foi finalizado por atendente.

Se precisar de mais informa√ß√µes, sinta-se √† vontade para enviar uma nova mensagem a qualquer momento!

Obrigado pela confian√ßa! üôè

---
*Atendimento encerrado*`;
  }

  // M√©todo para mensagem de libera√ß√£o de controle
  getReleaseMessage() {
    return `ü§ñ **Controle Liberado**

O atendimento manual foi liberado e o assistente virtual da ${config.company.name} est√° de volta!

Como posso ajud√°-lo hoje?

Digite "empresa" se voc√™ representa uma empresa interessada em nossos servi√ßos de RH
Digite "candidato" se voc√™ est√° procurando oportunidades de emprego

---
*Bot em modo autom√°tico*`;
  }

  // M√©todos para controle manual
  async enableManualControl(phoneNumber, agentId) {
    try {
      await this.database.enableManualControl(phoneNumber, agentId);
      console.log(`üë§ Controle manual habilitado para ${phoneNumber} por ${agentId}`);
      return true;
    } catch (error) {
      console.error('Erro ao habilitar controle manual:', error);
      return false;
    }
  }

  async disableManualControl(phoneNumber) {
    try {
      await this.database.disableManualControl(phoneNumber);
      console.log(`ü§ñ Controle manual desabilitado para ${phoneNumber} - Bot em modo autom√°tico`);
      return true;
    } catch (error) {
      console.error('Erro ao desabilitar controle manual:', error);
      return false;
    }
  }

  // M√©todo para habilitar modo autom√°tico do bot
  async enableAutoMode(phoneNumber) {
    try {
      await this.database.disableManualControl(phoneNumber);
      console.log(`ü§ñ Modo autom√°tico habilitado para ${phoneNumber}`);
      return true;
    } catch (error) {
      console.error('Erro ao habilitar modo autom√°tico:', error);
      return false;
    }
  }

  // M√©todo para liberar controle e finalizar conversa
  async releaseControlAndFinalize(phoneNumber) {
    try {
      console.log(`üîö Liberando controle para ${phoneNumber}`);
      
      // Desabilita controle manual
      await this.database.disableManualControl(phoneNumber);
      
      // Envia mensagem de libera√ß√£o
      const releaseMessage = this.getReleaseMessage();
      await this.sendMessage(phoneNumber, releaseMessage);
      
      // Salva a mensagem de libera√ß√£o
      await this.saveAgentMessage(phoneNumber, releaseMessage);
      
      console.log(`‚úÖ Controle liberado para ${phoneNumber} - Bot em modo autom√°tico`);
      
      return {
        success: true,
        message: releaseMessage
      };
    } catch (error) {
      console.error('Erro ao liberar controle:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async markFirstMessageHandled(phoneNumber) {
    try {
      await this.database.markFirstMessageHandled(phoneNumber);
      console.log(`‚úÖ Primeira mensagem marcada como tratada para ${phoneNumber}`);
      return true;
    } catch (error) {
      console.error('Erro ao marcar primeira mensagem:', error);
      return false;
    }
  }

  async getManualControlStatus(phoneNumber) {
    try {
      return await this.database.isManualControlEnabled(phoneNumber);
    } catch (error) {
      console.error('Erro ao obter status de controle manual:', error);
      return { enabled: false, agentId: null, takenAt: null };
    }
  }

  async getChats() {
    try {
      return await this.client.getChats();
    } catch (error) {
      console.error('Erro ao obter chats:', error);
      return [];
    }
  }

  async getChatById(chatId) {
    try {
      return await this.client.getChatById(chatId);
    } catch (error) {
      console.error('Erro ao obter chat:', error);
      return null;
    }
  }

  async initialize() {
    try {
      console.log('üöÄ Iniciando cliente WhatsApp...');
      console.log('‚è≥ Aguarde, isso pode levar alguns minutos...');
      
      // Adiciona timeout mais longo para inicializa√ß√£o
      const initPromise = this.client.initialize();
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout na inicializa√ß√£o do WhatsApp')), 120000); // 2 minutos
      });

      await Promise.race([initPromise, timeoutPromise]);
      
    } catch (error) {
      console.error('Erro ao inicializar cliente WhatsApp:', error);
      
      // Tenta reinicializar se for erro de protocolo
      if (error.message.includes('Protocol error') || error.message.includes('Execution context was destroyed')) {
        console.log('üîÑ Tentando reinicializar com configura√ß√µes alternativas...');
        await this.retryInitialize();
      } else {
        throw error;
      }
    }
  }

  async retryInitialize() {
    try {
      // Limpa a sess√£o anterior
      await this.client.destroy();
      
      // Cria novo cliente com configura√ß√µes mais simples
      this.client = new Client({
        authStrategy: new LocalAuth(),
        puppeteer: {
          headless: true,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--no-first-run',
            '--disable-extensions',
            '--disable-default-apps',
            '--disable-sync',
            '--disable-translate',
            '--hide-scrollbars',
            '--mute-audio',
            '--no-default-browser-check'
          ],
          timeout: 90000,
          protocolTimeout: 90000
        }
      });

      this.setupEventHandlers();
      await this.client.initialize();
      
    } catch (error) {
      console.error('‚ùå Falha na reinicializa√ß√£o:', error);
      throw error;
    }
  }

  async destroy() {
    try {
      await this.client.destroy();
      this.database.close();
      console.log('Cliente WhatsApp destru√≠do');
    } catch (error) {
      console.error('Erro ao destruir cliente:', error);
    }
  }

  isConnected() {
    return this.isReady;
  }

  getActiveConversationsStats() {
    try {
      // Retorna estat√≠sticas b√°sicas para compatibilidade
      return {
        total: 0,
        conversations: [],
        manualControl: {
          total: 0,
          conversations: []
        }
      };
    } catch (error) {
      console.error('Erro ao obter estat√≠sticas de conversas ativas:', error);
      return {
        total: 0,
        conversations: [],
        manualControl: {
          total: 0,
          conversations: []
        }
      };
    }
  }
}

module.exports = WhatsAppClient;
